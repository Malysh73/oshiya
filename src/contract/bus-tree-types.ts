/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers';
import type {Event, EventFilter} from 'ethers';
import {Listener, Provider} from '@ethersproject/providers';

export type G1PointStruct = {x: BigNumberish; y: BigNumberish};

export type G1PointStructOutput = [BigNumber, BigNumber] & {
    x: BigNumber;
    y: BigNumber;
};

export type G2PointStruct = {
    x: [BigNumberish, BigNumberish];
    y: [BigNumberish, BigNumberish];
};

export type G2PointStructOutput = [
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
] & {x: [BigNumber, BigNumber]; y: [BigNumber, BigNumber]};

export type SnarkProofStruct = {
    a: G1PointStruct;
    b: G2PointStruct;
    c: G1PointStruct;
};

export type SnarkProofStructOutput = [
    G1PointStructOutput,
    G2PointStructOutput,
    G1PointStructOutput,
] & {a: G1PointStructOutput; b: G2PointStructOutput; c: G1PointStructOutput};

export interface TypedEvent<
    TArgsArray extends Array<any> = any,
    TArgsObject = any,
> extends Event {
    args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
    extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...TypechainArgsArray<TEvent>, TEvent]): void;
}

type TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
        listener: TypedListener<TEvent>,
    ): TRes;
    (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
    deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
    infer C,
    any
>
    ? C
    : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
    ? Parameters<F['deploy']>
    : never;

export declare namespace BusQueues {
    export type BusQueueStruct = {
        nUtxos: BigNumberish;
        reward: BigNumberish;
        firstUtxoBlock: BigNumberish;
        lastUtxoBlock: BigNumberish;
        prevLink: BigNumberish;
        nextLink: BigNumberish;
    };

    export type BusQueueStructOutput = [
        number,
        BigNumber,
        number,
        number,
        number,
        number,
    ] & {
        nUtxos: number;
        reward: BigNumber;
        firstUtxoBlock: number;
        lastUtxoBlock: number;
        prevLink: number;
        nextLink: number;
    };

    export type BusQueueRecStruct = {
        queueId: BigNumberish;
        nUtxos: BigNumberish;
        reward: BigNumberish;
        firstUtxoBlock: BigNumberish;
        lastUtxoBlock: BigNumberish;
        commitment: BytesLike;
    };

    export type BusQueueRecStructOutput = {
        queueId: number;
        nUtxos: number;
        reward: BigNumber;
        firstUtxoBlock: number;
        lastUtxoBlock: number;
        commitment: string;
    };
}

export type BusBatchOnboardedEvent = TypedEvent<
    [BigNumber, string, BigNumber, BigNumber, string, string],
    {
        queueId: BigNumber;
        batchRoot: string;
        numUtxosInBatch: BigNumber;
        leftLeafIndexInBusTree: BigNumber;
        busTreeNewRoot: string;
        busBranchNewRoot: string;
    }
>;

export type BusBatchOnboardedEventFilter =
    TypedEventFilter<BusBatchOnboardedEvent>;

export type BusBranchFilledEvent = TypedEvent<
    [BigNumber, string],
    {branchIndex: BigNumber; busBranchFinalRoot: string}
>;

export type BusBranchFilledEventFilter = TypedEventFilter<BusBranchFilledEvent>;

export type BusQueueOpenedEvent = TypedEvent<[BigNumber], {queueId: BigNumber}>;

export type BusQueueOpenedEventFilter = TypedEventFilter<BusQueueOpenedEvent>;

export type BusQueueProcessedEvent = TypedEvent<
    [BigNumber],
    {queueId: BigNumber}
>;

export type BusQueueProcessedEventFilter =
    TypedEventFilter<BusQueueProcessedEvent>;

export type BusQueueRewardAddedEvent = TypedEvent<
    [BigNumber, BigNumber],
    {queueId: BigNumber; accumReward: BigNumber}
>;

export type BusQueueRewardAddedEventFilter =
    TypedEventFilter<BusQueueRewardAddedEvent>;

export type MinerRewardedEvent = TypedEvent<
    [string, BigNumber],
    {miner: string; reward: BigNumber}
>;

export type MinerRewardedEventFilter = TypedEventFilter<MinerRewardedEvent>;

export type UtxoBusQueuedEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    {utxo: string; queueId: BigNumber; utxoIndexInBatch: BigNumber}
>;

export type UtxoBusQueuedEventFilter = TypedEventFilter<UtxoBusQueuedEvent>;

export interface BusTree extends BaseContract {
    contractName: 'BusTree';
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>,
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        CIRCUIT_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

        VERIFIER(overrides?: CallOverrides): Promise<[string]>;

        busTreeRoot(overrides?: CallOverrides): Promise<[string]>;

        getBusQueue(
            queueId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BusQueues.BusQueueStructOutput] & {
                commitment: string;
                params: BusQueues.BusQueueStructOutput;
            }
        >;

        getBusQueuesStats(overrides?: CallOverrides): Promise<
            [number, number, BigNumber, number, number] & {
                curQueueId: number;
                curQueueNumUtxos: number;
                curQueueReward: BigNumber;
                numPendingQueues: number;
                oldestPendingQueueLink: number;
            }
        >;

        getBusTreeStats(overrides?: CallOverrides): Promise<
            [number, number, number, number] & {
                numBatchesInBusTree: number;
                numUtxosInBusTree: number;
                latestBranchFirstBatchBlock: number;
                latestBatchBlock: number;
            }
        >;

        getOldestPendingQueues(
            maxLength: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BusQueues.BusQueueRecStructOutput[]] & {
                queues: BusQueues.BusQueueRecStructOutput[];
            }
        >;

        onboardQueue(
            miner: string,
            queueId: BigNumberish,
            busTreeNewRoot: BytesLike,
            batchRoot: BytesLike,
            busBranchNewRoot: BytesLike,
            proof: SnarkProofStruct,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<ContractTransaction>;

        simulateAddBusQueueReward(
            queueId: BigNumberish,
            extraReward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<ContractTransaction>;

        simulateAddUtxosToBusQueue(
            utxos: BytesLike[],
            reward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<ContractTransaction>;

        simulateSetBusQueueAsProcessed(
            queueId: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<ContractTransaction>;
    };

    CIRCUIT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER(overrides?: CallOverrides): Promise<string>;

    busTreeRoot(overrides?: CallOverrides): Promise<string>;

    getBusQueue(
        queueId: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [string, BusQueues.BusQueueStructOutput] & {
            commitment: string;
            params: BusQueues.BusQueueStructOutput;
        }
    >;

    getBusQueuesStats(overrides?: CallOverrides): Promise<
        [number, number, BigNumber, number, number] & {
            curQueueId: number;
            curQueueNumUtxos: number;
            curQueueReward: BigNumber;
            numPendingQueues: number;
            oldestPendingQueueLink: number;
        }
    >;

    getBusTreeStats(overrides?: CallOverrides): Promise<
        [number, number, number, number] & {
            numBatchesInBusTree: number;
            numUtxosInBusTree: number;
            latestBranchFirstBatchBlock: number;
            latestBatchBlock: number;
        }
    >;

    getOldestPendingQueues(
        maxLength: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<BusQueues.BusQueueRecStructOutput[]>;

    onboardQueue(
        miner: string,
        queueId: BigNumberish,
        busTreeNewRoot: BytesLike,
        batchRoot: BytesLike,
        busBranchNewRoot: BytesLike,
        proof: SnarkProofStruct,
        overrides?: Overrides & {from?: string | Promise<string>},
    ): Promise<ContractTransaction>;

    simulateAddBusQueueReward(
        queueId: BigNumberish,
        extraReward: BigNumberish,
        overrides?: Overrides & {from?: string | Promise<string>},
    ): Promise<ContractTransaction>;

    simulateAddUtxosToBusQueue(
        utxos: BytesLike[],
        reward: BigNumberish,
        overrides?: Overrides & {from?: string | Promise<string>},
    ): Promise<ContractTransaction>;

    simulateSetBusQueueAsProcessed(
        queueId: BigNumberish,
        overrides?: Overrides & {from?: string | Promise<string>},
    ): Promise<ContractTransaction>;

    callStatic: {
        CIRCUIT_ID(overrides?: CallOverrides): Promise<BigNumber>;

        VERIFIER(overrides?: CallOverrides): Promise<string>;

        busTreeRoot(overrides?: CallOverrides): Promise<string>;

        getBusQueue(
            queueId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BusQueues.BusQueueStructOutput] & {
                commitment: string;
                params: BusQueues.BusQueueStructOutput;
            }
        >;

        getBusQueuesStats(overrides?: CallOverrides): Promise<
            [number, number, BigNumber, number, number] & {
                curQueueId: number;
                curQueueNumUtxos: number;
                curQueueReward: BigNumber;
                numPendingQueues: number;
                oldestPendingQueueLink: number;
            }
        >;

        getBusTreeStats(overrides?: CallOverrides): Promise<
            [number, number, number, number] & {
                numBatchesInBusTree: number;
                numUtxosInBusTree: number;
                latestBranchFirstBatchBlock: number;
                latestBatchBlock: number;
            }
        >;

        getOldestPendingQueues(
            maxLength: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BusQueues.BusQueueRecStructOutput[]>;

        onboardQueue(
            miner: string,
            queueId: BigNumberish,
            busTreeNewRoot: BytesLike,
            batchRoot: BytesLike,
            busBranchNewRoot: BytesLike,
            proof: SnarkProofStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        simulateAddBusQueueReward(
            queueId: BigNumberish,
            extraReward: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        simulateAddUtxosToBusQueue(
            utxos: BytesLike[],
            reward: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        simulateSetBusQueueAsProcessed(
            queueId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, number, BigNumber] & {
                commitment: string;
                nUtxos: number;
                reward: BigNumber;
            }
        >;
    };

    filters: {
        'BusBatchOnboarded(uint256,bytes32,uint256,uint256,bytes32,bytes32)'(
            queueId?: BigNumberish | null,
            batchRoot?: BytesLike | null,
            numUtxosInBatch?: null,
            leftLeafIndexInBusTree?: null,
            busTreeNewRoot?: null,
            busBranchNewRoot?: null,
        ): BusBatchOnboardedEventFilter;
        BusBatchOnboarded(
            queueId?: BigNumberish | null,
            batchRoot?: BytesLike | null,
            numUtxosInBatch?: null,
            leftLeafIndexInBusTree?: null,
            busTreeNewRoot?: null,
            busBranchNewRoot?: null,
        ): BusBatchOnboardedEventFilter;

        'BusBranchFilled(uint256,bytes32)'(
            branchIndex?: BigNumberish | null,
            busBranchFinalRoot?: null,
        ): BusBranchFilledEventFilter;
        BusBranchFilled(
            branchIndex?: BigNumberish | null,
            busBranchFinalRoot?: null,
        ): BusBranchFilledEventFilter;

        'BusQueueOpened(uint256)'(queueId?: null): BusQueueOpenedEventFilter;
        BusQueueOpened(queueId?: null): BusQueueOpenedEventFilter;

        'BusQueueProcessed(uint256)'(
            queueId?: BigNumberish | null,
        ): BusQueueProcessedEventFilter;
        BusQueueProcessed(
            queueId?: BigNumberish | null,
        ): BusQueueProcessedEventFilter;

        'BusQueueRewardAdded(uint256,uint256)'(
            queueId?: BigNumberish | null,
            accumReward?: null,
        ): BusQueueRewardAddedEventFilter;
        BusQueueRewardAdded(
            queueId?: BigNumberish | null,
            accumReward?: null,
        ): BusQueueRewardAddedEventFilter;

        'MinerRewarded(address,uint256)'(
            miner?: null,
            reward?: null,
        ): MinerRewardedEventFilter;
        MinerRewarded(miner?: null, reward?: null): MinerRewardedEventFilter;

        'UtxoBusQueued(bytes32,uint256,uint256)'(
            utxo?: BytesLike | null,
            queueId?: BigNumberish | null,
            utxoIndexInBatch?: null,
        ): UtxoBusQueuedEventFilter;
        UtxoBusQueued(
            utxo?: BytesLike | null,
            queueId?: BigNumberish | null,
            utxoIndexInBatch?: null,
        ): UtxoBusQueuedEventFilter;
    };

    estimateGas: {
        CIRCUIT_ID(overrides?: CallOverrides): Promise<BigNumber>;

        VERIFIER(overrides?: CallOverrides): Promise<BigNumber>;

        busTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

        getBusQueue(
            queueId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getBusQueuesStats(overrides?: CallOverrides): Promise<BigNumber>;

        getBusTreeStats(overrides?: CallOverrides): Promise<BigNumber>;

        getOldestPendingQueues(
            maxLength: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        onboardQueue(
            miner: string,
            queueId: BigNumberish,
            busTreeNewRoot: BytesLike,
            batchRoot: BytesLike,
            busBranchNewRoot: BytesLike,
            proof: SnarkProofStruct,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<BigNumber>;

        simulateAddBusQueueReward(
            queueId: BigNumberish,
            extraReward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<BigNumber>;

        simulateAddUtxosToBusQueue(
            utxos: BytesLike[],
            reward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<BigNumber>;

        simulateSetBusQueueAsProcessed(
            queueId: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        CIRCUIT_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VERIFIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        busTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getBusQueue(
            queueId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getBusQueuesStats(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getBusTreeStats(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getOldestPendingQueues(
            maxLength: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        onboardQueue(
            miner: string,
            queueId: BigNumberish,
            busTreeNewRoot: BytesLike,
            batchRoot: BytesLike,
            busBranchNewRoot: BytesLike,
            proof: SnarkProofStruct,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<PopulatedTransaction>;

        simulateAddBusQueueReward(
            queueId: BigNumberish,
            extraReward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<PopulatedTransaction>;

        simulateAddUtxosToBusQueue(
            utxos: BytesLike[],
            reward: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<PopulatedTransaction>;

        simulateSetBusQueueAsProcessed(
            queueId: BigNumberish,
            overrides?: Overrides & {from?: string | Promise<string>},
        ): Promise<PopulatedTransaction>;
    };
}
